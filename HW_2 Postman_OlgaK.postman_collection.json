{
	"info": {
		"_postman_id": "f75b4be2-2bf2-4398-9eb8-2f99ba3ee69d",
		"name": "HW_2 Postman_OlgaK",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1)first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//ответ имеет статус код 200\r",
							"pm.test(\"Проверяем что приходит правильная строка в ответе\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"    });\r",
							"    console.log(pm.response.text());//выводим в консоль ответ сервера\r",
							"   pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2)user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2)Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3)Спарсить response body в json\r",
							"var jsonOtvet =pm.response.json();//спарсили ответ в json-создали переменную,которая равна преобразованному в json ответу от сервера\r",
							"console.log(\"json response =\",jsonOtvet);\r",
							"//вывели ответ json  в консоль\r",
							"\r",
							"//4)Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"//console.log(\"выводим тип данных в ответе\" +' age' + ' '+ typeof(jsonOtvet.age) +'; '+ 'family'+' ' + typeof(jsonOtvet.family) +' ;'+'name '+ ' ' + typeof(jsonOtvet.name) +'; '+ 'salary'+ ' ' + typeof(jsonOtvet.salary));//проверили тип данных в ответе -1й способ\r",
							"\r",
							"const Type = ` выводим тип данных в ответе\r",
							"age ${typeof(jsonOtvet.age)};\r",
							"family ${typeof(jsonOtvet.family)};\r",
							"name ${typeof(jsonOtvet.name)};\r",
							"salary ${typeof(jsonOtvet.salary)}\r",
							"`\r",
							"console.log(Type);// проверка типа данных и вывод в консоль-2й способ\r",
							"pm.test(\"Name в ответе равно name с request\", function () {    \r",
							"    pm.expect(jsonOtvet.name).to.eql(\"Kate\");    \r",
							"    console.log(\"proverka Name =\",jsonOtvet.name)\r",
							"});\r",
							"//ожидается что в ответе с сервера получим параметр (имя Kate)который ранее вносили в запрос(request)\r",
							"\r",
							"//5)Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test (\"age в ответе равно age с request\",function () {pm.expect(jsonOtvet.age).to.eql(\"45\");\r",
							"console.log (\"proverka age\" , jsonOtvet.age)});\r",
							"\r",
							"//6)Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test (\"Проверить что salary в ответе равно salary с request\",\r",
							"function(){\r",
							"    pm.expect(jsonOtvet.salary).to.eql(2000);\r",
							"    console.log (\"proverka salary\", jsonOtvet.salary)});\r",
							"\r",
							"//7) Спарсить request\r",
							"    let ZaprosPars = request.data;//спарсили request \r",
							"    console.log(\"json request=\",ZaprosPars);//вывели в консоль результат\r",
							"\r",
							"//8)Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"    pm.test(\"проверить, что name в ответе равно name s request-name забрать из request\",\r",
							"    function(){pm.expect(jsonOtvet.name).to.eql(ZaprosPars.name)\r",
							"   });// обратились к свойству name из объекта json response(имя перменной jsonOtvet) и сравнили со свойством name объекта json request(имя переменной ZaprosPars)\r",
							"   console.log( \"proverka name iz request=name response\" +\" \"+ jsonOtvet.name +\" \" + ZaprosPars.name);//вывели в консоль для зрительного сравнения\r",
							"\r",
							"//9)Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"   pm.test (\"Проверить что age в ответе равно age s request -age забрать из request\",\r",
							"   function(){pm.expect(jsonOtvet.age).to.eql(ZaprosPars.age)});\r",
							"   console.log( \"proverka age iz request=age response\" +\" \"+ jsonOtvet.age +\" \" + ZaprosPars.age);\r",
							"\r",
							"//10)Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"   pm.test (\"Проверить что salary в ответе равно salary s request -salary забрать из request\",\r",
							"   function()\r",
							"   {pm.expect(jsonOtvet.salary).to.eql(Number(ZaprosPars.salary))});//тест не работал пока не преобразовали тип данных salary в request в числовой (добавить Number)\r",
							"  console.log(\"vyvesti tip salary iz request\",typeof(ZaprosPars.salary));\r",
							"   console.log( \"proverka salary iz request=salary response\" +\" \"+ jsonOtvet.salary +\" \" + ZaprosPars.salary);\r",
							"\r",
							"//11)Вывести в консоль параметр family из response\r",
							"console.log(\"параметр family из response\",jsonOtvet.family);\r",
							"\r",
							"//12)Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"var jsonFamily=jsonOtvet.family;//т.к в ответе(response) параметр family является объектом с вложенными свойствами- обьявляем переменную,чтобы обратиться конкретно к ней(к параметру family) для проверки свойства u_salary_1_5_year\r",
							"pm.test (\"Проверить что u_salary_1_5_year в ответе равно salary*4 salary забрать из request\",\r",
							"   function(){pm.expect(jsonFamily.u_salary_1_5_year).to.eql((ZaprosPars.salary)*4)})\r",
							"\r",
							"\r",
							"    \r",
							"    \r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Kate",
							"type": "default"
						},
						{
							"key": "age",
							"value": "45",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "3)object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3)Спарсить response body в json\r",
							"var jsonOtvet = pm.response.json();\r",
							"console.log(\"otvet response \",jsonOtvet);\r",
							"\r",
							"//4) Спарсить request\r",
							"let ZaprosGet = pm.request.url.query.toObject();\r",
							"console.log (\"sparsili zapros\",ZaprosGet);\r",
							"\r",
							"//5) Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"что name в ответе равно name s request name забрать из request\", function () {\r",
							"        pm.expect(jsonOtvet.name).to.eql(ZaprosGet.name);\r",
							"});\r",
							"\r",
							"//6)Проверить, что age в ответе равно age s request -age забрать из request.\r",
							"pm.test(\"Проверить что age в ответе равно age s request age забрать из request\", function (){\r",
							"    pm.expect(jsonOtvet.age).to.eql(ZaprosGet.age)\r",
							"});\r",
							"\r",
							"//7.Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"  pm.test (\"Проверить что salary в ответе равно salary s request -salary забрать из request\",\r",
							"   function()\r",
							"   {pm.expect(jsonOtvet.salary).to.eql(Number(ZaprosGet.salary))});//тест не работал пока не преобразовали тип данных salary в request в числовой (добавить Number)\r",
							"  console.log(\"vyvesti tip salary iz request\",typeof(ZaprosGet.salary));\r",
							"\r",
							"  //8) Вывести в консоль параметр family из response\r",
							"  console.log(\"vyvesti family iz response\",jsonOtvet.family);\r",
							"\r",
							"  //9)Проверить, что у параметра dog есть параметры name.\r",
							"var FamilyResp = jsonOtvet.family;\r",
							"pm.test (\"Проверить что у параметра dog есть параметры name\", function()\r",
							"    { pm.expect(FamilyResp.pets.dog).to.have.a.property(\"name\")\r",
							"});\r",
							"console.log(\"вывести в консоль параметры dog\",FamilyResp.pets.dog);\r",
							"//10)Проверить, что у параметра dog есть параметры age\r",
							"pm.test (\"Проверить, что у параметра dog есть параметры age\",function()\r",
							"{ pm.expect(FamilyResp.pets.dog).to.have.a.property(\"age\")\r",
							"});\r",
							"\r",
							"//11)Проверить, что параметр name имеет значение Luky\r",
							"pm.test (\"Проверить что параметр name имеет значение Luky\", function()\r",
							"{pm.expect(FamilyResp.pets.dog.name).to.eql(\"Luky\")});\r",
							"\r",
							"//12)Проверить, что параметр age имеет значение 4\r",
							"pm.test (\"Проверить, что параметр age имеет значение 4\", function()\r",
							"{pm.expect(FamilyResp.pets.dog.age).to.eql(4)});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Igor&age=40&salary=1000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Igor"
						},
						{
							"key": "age",
							"value": "40"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "4) object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1-2) Отправить запрос, Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3)Спарсить response body в json\r",
							"var jsonOtvet = pm.response.json();\r",
							"console.log (\"ответ в формате json\",jsonOtvet);\r",
							"\r",
							"//4)Спарсить request\r",
							"let ZaprosGet = pm.request.url.query.toObject();\r",
							"console.log(\"запрос в формате json\", ZaprosGet);\r",
							"\r",
							"//5) Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Проверить что name в ответе равно name s request - name забрать из request\", function (){\r",
							"    pm.expect(jsonOtvet.name).to.eql(ZaprosGet.name)\r",
							"});\r",
							"\r",
							"//6)Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Проверить, что age в ответе равно age из request -age забрать из request\", function(){\r",
							"    pm.expect(jsonOtvet.age).to.eql(Number(ZaprosGet.age))\r",
							"});\r",
							"//тест падал, т.к в response по параметру age приходил тип число(number),поменяли тип данных в тесте для запроса \r",
							"\r",
							"//7)Вывести в консоль параметр salary из request.\r",
							"console.log(\"вывести salary из request \",ZaprosGet.salary);\r",
							"\r",
							"//8)Вывести в консоль параметр salary из response\r",
							"console.log(\"вывести salary из response\", jsonOtvet.salary);\r",
							"\r",
							"//9)Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(\"Вывести в консоль 0-й элемент параметра salary из response\",jsonOtvet.salary[0]+\" \"+ typeof(jsonOtvet.salary[0]));\r",
							"\r",
							"//10)Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log(\"Вывести в консоль 1-й элемент параметра salary параметра salary из response\",jsonOtvet.salary[1]+\" \"+ typeof(jsonOtvet.salary[1]));\r",
							"\r",
							"//11)Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log(\"Вывести в консоль 2-й элемент параметра salary параметра salary из response\",jsonOtvet.salary[2]);\r",
							"\r",
							"//12)проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что 0-й элемент параметра salary равен salary из request salary забрать из request\", function(){\r",
							" pm.expect(jsonOtvet.salary[0]).to.eql(Number(ZaprosGet.salary))\r",
							"});\r",
							"//т.к  в response в параметре salary тип данных -number, а  в запросе(request) тип данных string - поменяли в переменной запроса тип данных на number\r",
							"\r",
							"//13)Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\" 1-й элемент параметра salary равен salary*2 из request - salary забрать из request\", function(){\r",
							"    var Salary_1 = String(Number(ZaprosGet.salary)*2);\r",
							"    console.log(Salary_1);\r",
							"    pm.expect(jsonOtvet.salary[1]).to.eql(Salary_1)\r",
							"});\r",
							"\r",
							"//14)Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"2-й элемент параметра salary равен salary*3 из request -salary забрать из request\", function(){\r",
							"var Salary_2 = String(Number(ZaprosGet.salary)*3);\r",
							"console.log(\"проверка значения Salary_2\",Salary_2);\r",
							"pm.expect(jsonOtvet.salary[2]).to.eql(Salary_2)\r",
							"});\r",
							"\r",
							"//15-17)Создать в окружении переменную name : \r",
							"//1.зайти в окружение gr_27_env создать переменные name,age,salary\r",
							"//18-20)Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", \"Ivan\");\r",
							"pm.environment.set(\"age\", \"40\");\r",
							"pm.environment.set(\"salary\", \"2000\"); \r",
							"\r",
							"//21)Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"\r",
							" perem = 0;\r",
							"//while (perem <= 2){\r",
							"  //console.log(\"выводим элемент массива salary №\",\r",
							" // perem + \" \" + \" = \" + jsonOtvet.salary[perem]);\r",
							" // perem++;\r",
							"//};\r",
							"\r",
							"while (perem <= 2){\r",
							"    const test = `${perem}  =  ${jsonOtvet.salary[perem]}`;\r",
							"    console.log(\"выводим элемент массива salary №\", test);\r",
							"  perem++;\r",
							"};\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_4?name=Andrey&age=36&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Andrey"
						},
						{
							"key": "age",
							"value": "36"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "5) user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Вставить параметр salary из окружения в request\r",
							"//2) Вставить параметр age из окружения в age\r",
							"//3) Вставить параметр name из окружения в name\r",
							"//4) Отправить запрос.\r",
							"\r",
							"//5)Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    console.log(\"status code is 200\")\r",
							"});\r",
							"//6)Спарсить response body в json\r",
							"\r",
							"let jsonOtvet = pm.response.json();\r",
							"console.log(\"vyvodim response\",jsonOtvet);\r",
							"\r",
							"//7)Спарсить request\r",
							"let jsonZapros = request.data;\r",
							"console.log(\"vyvodim request\",jsonZapros);\r",
							"\r",
							"//8)Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"проверить, что json response имеет параметр start_qa_salary\",function(){\r",
							" pm.expect(jsonOtvet).to.have.any.key(\"start_qa_salary\");\r",
							"   });\r",
							"\r",
							"//9)Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_6_months\",function(){\r",
							"pm.expect(jsonOtvet).to.have.any.key(\"qa_salary_after_6_months\")\r",
							"});\r",
							"\r",
							"//10)Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_12_months\",function(){\r",
							"    pm.expect(jsonOtvet).to.have.property(\"qa_salary_after_12_months\");\r",
							"    console.log(\"qa_salary_after_12_months -\",jsonOtvet.qa_salary_after_12_months)\r",
							"});\r",
							"\r",
							"//11)Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_1.5_year\",function(){\r",
							"pm.expect(jsonOtvet).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});\r",
							"\r",
							"//12)Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Проверить, что json response имеет параметр qa_salary_after_3.5_years\",function(){\r",
							"pm.expect(jsonOtvet).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});\r",
							"\r",
							"//13)Проверить, что json response имеет параметр person\r",
							"pm.test(\"Проверить, что json response имеет параметр person\",function(){\r",
							"pm.expect(jsonOtvet).to.have.property(\"person\");\r",
							"console.log(\"параметр person \",jsonOtvet.person)\r",
							"});\r",
							"\r",
							"//14)Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр start_qa_salary равен salary из request -salary забрать из request\",function(){\r",
							"    pm.expect(jsonOtvet.start_qa_salary==jsonZapros.salary).to.be.true;//проверка без строгого равенства(===),типы данных не сравниваются только значения\r",
							"    console.log(\"start_qa_salary iz response =\",jsonOtvet.start_qa_salary);\r",
							"    console.log(\"salary iz request =\",jsonZapros.salary)\r",
							"});\r",
							"\r",
							"//15)Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request\",function(){\r",
							"    pm.expect(jsonOtvet.qa_salary_after_6_months ==jsonZapros.salary*2).to.be.true;\r",
							"    console.log(\"jsonOtvet.qa_salary_after_6_months =\",jsonOtvet.qa_salary_after_6_months);\r",
							"    console.log(\"jsonZapros.salary*2 = \",jsonZapros.salary*2)\r",
							"});\r",
							"\r",
							"//16)Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request -salary забрать из request\",function(){\r",
							"pm.expect(jsonOtvet.qa_salary_after_12_months==jsonZapros.salary*2.7).to.be.ok\r",
							"});\r",
							"console.log(\"qa_salary_after_12_months =\",jsonOtvet.qa_salary_after_12_months);\r",
							"console.log(\"salary*2.7 из request = \",jsonZapros.salary*2.7);\r",
							"\r",
							"//17)Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request - salary забрать из request\",function(){\r",
							"pm.expect(jsonOtvet[\"qa_salary_after_1.5_year\"]===jsonZapros.salary*3.3).to.be.true\r",
							"});\r",
							"console.log(\"qa_salary_after_1.5_year iz response = \",jsonOtvet[\"qa_salary_after_1.5_year\"]);\r",
							"console.log(\"salary*3.3 iz request= \",jsonZapros.salary*3.3);\r",
							"\r",
							"//18)Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request salary забрать из request\",function(){\r",
							"    pm.expect(jsonOtvet[\"qa_salary_after_3.5_years\"]===\r",
							"    jsonZapros.salary*3.8).to.be.true\r",
							"});\r",
							"console.log(\"qa_salary_after_3.5_years iz response = \",jsonOtvet[\"qa_salary_after_3.5_years\"]);\r",
							"console.log(\"salary*3.8 из request = \",jsonZapros.salary*3.8);\r",
							"\r",
							"//19)Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Проверить, что в параметре person, 1-й элемент из u_name равен salary из request - salary забрать из request\",function(){\r",
							"pm.expect(jsonOtvet.person.u_name[1]==\r",
							"jsonZapros.salary).to.be.ok\r",
							"});\r",
							"\r",
							"console.log(\"параметр person- 1-й элемент из u_name\",jsonOtvet.person.u_name[1]);\r",
							"console.log(\"salary из request \",jsonZapros.salary);\r",
							"console.log(\"............................................................\");\r",
							"\r",
							"//20)Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Проверить, что что параметр u_age равен age из request age забрать из request\", function(){\r",
							"    pm.expect(jsonOtvet.person.u_age==\r",
							"jsonZapros.age).to.be.true\r",
							"});\r",
							"\r",
							"//21)Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Проверить что параметр u_salary_5_years равен salary*4.2 из request -salary забрать из request\", function(){\r",
							"    pm.expect(jsonOtvet.person.u_salary_5_years===\r",
							"jsonZapros.salary*4.2).to.be.true\r",
							"});\r",
							" \r",
							"//22)Написать цикл который выведет в консоль по порядку элементы списка из параметра person]\r",
							"\r",
							"const personDto = jsonOtvet.person;\r",
							"//for (const personKey in personDto){\r",
							"  //console.log( {[personKey]: personDto[personKey]} )\r",
							"   //};\r",
							" //если хотим вывести по порядку все элементы объекта person\r",
							"   for (var i=0; i<=2; i++){\r",
							"       console.log(\"выводим по порядку элементы массива\", i,personDto.u_name[i])\r",
							"   };"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}